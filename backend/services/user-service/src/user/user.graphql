type User {
  id: ID!
  username: String!
  email: String!
  firstName: String
  lastName: String
  bio: String
  jobTitle: String
  company: String
  role: String!
  isVerified: Boolean!
  verificationToken: String
  enrolledCourseIds: [String!]
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
  firstName: String
  lastName: String
  bio: String
  jobTitle: String
  company: String
  role: String
  isVerified: Boolean
  verificationToken: String
  enrolledCourseIds: [String!]
}

input UpdateUserInput {
  id: ID!
  username: String
  email: String
  password: String
  firstName: String
  lastName: String
  bio: String
  jobTitle: String
  company: String
  role: String
  isVerified: Boolean
  verificationToken: String
  enrolledCourseIds: [String!]
}

type Query {
  users: [User!]!
  user(id: ID!): User
  userEnrolledCourses(userId: ID!): [String!]
}
type Query {
  users: [User!]!
  user(id: ID!): User
  userEnrolledCourses(userId: ID!): [String!]
  me: User       
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: ID!): Boolean!
  enrollUserInCourse(userId: ID!, courseId: String!): User!
  unenrollUserFromCourse(userId: ID!, courseId: String!): User!
}